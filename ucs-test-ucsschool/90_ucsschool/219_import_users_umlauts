#!/usr/share/ucs-test/runner python
## -*- coding: utf-8 -*-
## desc: Make sure :umlauts work as expected
## tags: [apptest,ucsschool,ucsschool_import1]
## roles: [domaincontroller_master]
## exposure: dangerous
## packages:
##   - ucs-school-import
## bugs: [44370]

import copy
import random
import univention.testing.strings as uts
from essential.importusers_cli_v2 import CLI_Import_v2_Tester
from essential.importusers import Person


class Test(CLI_Import_v2_Tester):
	ou_B = None
	ou_C = None

	def test(self):  # formerly test_create_modify_delete_user()
		"""
		for role in ('student', 'teacher', 'staff', 'teacher_and_staff'):
			import user with role <role>
			modify user with role <role> → changing group memberships
			remove user with role <role>
		"""
		source_uid = 'sourceUID-%s' % (uts.random_string(),)
		config = copy.deepcopy(self.default_config)
		config.update_entry('sourceUID', source_uid)
		config.update_entry('scheme:username:default', '<:umlauts><firstname>[0].<lastname><:lower>')
		config.update_entry('csv:mapping:Benutzername', 'name')
		config.update_entry('csv:mapping:recordUID', 'record_uid')
		config.update_entry('csv:mapping:role', '__type')
		config.update_entry('user_role', None)
		config.update_entry('classes:reader', 'ucsschool.importer.reader.test_csv_reader.TestCsvReader')

		roles = ('student', 'teacher', 'staff', 'teacher_and_staff')
		names = [
			{
				'firstname': u'Ýlang',
				'lastname': u'Müstèrmánn',
				'expected': {'username': 'y.muestermann', 'firstname': 'Ylang', 'lastname': 'Muestermann'},
			},
			{
				'firstname': u'Öle',
				'lastname': u'Mästèrmànn',
				'expected': {'username': 'o.maestermann', 'firstname': 'Oele', 'lastname': 'Maestermann'}
			},
			{
				'firstname': u'Nînä',
				'lastname': u'Müstèrfräú',
				'expected': {'username': 'n.muesterfraeu', 'firstname': 'Ninae', 'lastname': 'Muesterfraeu'}
			},
			{
				'firstname': u'Ǹanâ',
				'lastname': u'Mästérfrâü',
				'expected': {'username': 'n.maesterfraue', 'firstname': 'Nana', 'lastname': 'Maesterfraue'}
			}
		]
		random.shuffle(names)
		person_list = []
		for role, name in zip(roles, names):
			person = Person(self.ou_A.name, role)
			person.update(username='', firstname=name['firstname'], lastname=name['lastname'])
			person._expected_names = name['expected']
			person_list.append(person)

		self.log.info('*** Importing users: %r', zip(roles, names))
		fn_csv = self.create_csv_file(person_list=person_list, mapping=config['csv']['mapping'])
		config.update_entry('input:filename', fn_csv)
		fn_config = self.create_config_json(config=config)
		self.save_ldap_status()
		self.run_import(['-c', fn_config])
		self.check_new_and_removed_users(4, 0)
		for person in person_list:
			person.update(
				username=person._expected_names['username'],
				record_uid='%s;%s;%s' % (str(person.firstname), str(person.lastname), person.mail),
				source_uid=source_uid,
				firstname=person._expected_names['firstname'],
				lastname=person._expected_names['lastname'],
			)
			person.verify()


if __name__ == '__main__':
	Test().run()
