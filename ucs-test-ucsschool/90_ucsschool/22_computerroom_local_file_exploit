#!/usr/share/ucs-test/runner python
# -*- coding: utf-8 -*-
## desc: Test local expolit reading room file
## roles: [domaincontroller_master, domaincontroller_slave]
## tags: [apptest,ucsschool,ucsschool_base1]
## exposure: dangerous
## packages: [ucs-school-umc-computerroom]
## bugs: [43039]

import os
import sys
import logging
from unittest import main, TestCase
import univention.testing.strings as uts
import univention.testing.ucr as ucr_test
from univention.management.console.modules import UMC_Error
from univention.management.console.modules.computerroom import _readRoomInfo


class TestLegacyHooks(TestCase):
	local_file_path = ''
	text_in_local_file = ''
	ucr = None
	logger = None

	@classmethod
	def setUpClass(cls):
		logging.basicConfig(stream=sys.stderr, level=logging.DEBUG)
		cls.ucr = ucr_test.UCSTestConfigRegistry()
		cls.ucr.load()
		cls.local_file_path = '/etc/{}'.format(uts.random_username())
		cls.logger = logging.getLogger("TestLog")
		cls.logger.info('Test file is %r.', cls.local_file_path)

	@classmethod
	def tearDownClass(cls):
		cls.ucr = None
		os.remove(cls.local_file_path)
		cls.logger.info('Removed %r.', cls.local_file_path)

	@classmethod
	def setUp(self):
		self.text_in_local_file = uts.random_string(30)
		with open(self.local_file_path, 'w') as fp:
			fp.write(self.text_in_local_file)
		self.logger.info('Wrote to %r:\n%s\n------------', self.local_file_path, self.text_in_local_file)

	def test_bad_dn(self):
		room_dn = 'cn={},cn=groups,ou=foo,{}'.format(self.local_file_path, self.ucr['ldap/base'])
		self.logger.info('Trying to read info for "room DN" %r...', room_dn)
		with self.assertRaises(UMC_Error):
			info = _readRoomInfo('cn={},cn=groups,ou=foo,{}'.format(self.local_file_path, self.ucr['ldap/base']))
			self.logger.error('No exception raised. _readRoomInfo() returned: %r', info)
		with open(self.local_file_path, 'r') as fp:
			txt = fp.read()
		self.assertEqual(txt, self.text_in_local_file, 'Test f was changed.')

	def test_good_dn(self):
		room_dn = 'cn={},cn=groups,ou=foo,{}'.format(uts.random_groupname(), self.ucr['ldap/base'])
		self.logger.info('Trying to read info for "room DN" %r...', room_dn)
		info = _readRoomInfo('cn={},cn=groups,ou=foo,{}'.format(self.local_file_path, self.ucr['ldap/base']))
		self.logger.info('OK: no exception raised. _readRoomInfo() returned: %r', info)
		self.assertEqual(info, {})
		with open(self.local_file_path, 'r') as fp:
			txt = fp.read()
		self.assertEqual(txt, self.text_in_local_file, 'Test file was changed.')


if __name__ == '__main__':
	main(verbosity=2)
