#!/usr/share/ucs-test/runner python
# coding=utf-8
## desc: check specific LDAP access permissions
## roles: [domaincontroller_master]
## tags: [apptest, ucsschool,ucsschool_base1,SKIP]
## timeout: 3600
## exposure: dangerous
## packages: [ucs-school-ldap-acls-master]

from __future__ import print_function
import os
import time

import univention.admin.uldap
import univention.testing.udm
from univention.testing.ucsschool.ucs_test_school import AutoMultiSchoolEnv, logger


class MyObj(object):
	def __init__(self, name, dn):
		self.name = name
		self.dn = dn


class ACLTester(object):
	def __init__(self, ucr, actor_dn):
		self.actor_dn = actor_dn
		self.lo = univention.admin.uldap.access(
			host=ucr['ldap/master'],
			port=int(ucr.get('ldap/master/port', '7389')),
			base=ucr['ldap/base'],
			binddn=actor_dn,
			bindpw='univention',
		)
		self.errors = []  # type: List[str]
		logger.info('ACTOR: %s', self.actor_dn)

	def test_attribute(self, dn, attribute, permission):
		logger.info('test_attribute(%r, %r, %r)',  dn, attribute, permission)
		assert permission in ('none', 'read', 'write')
		if permission == 'none':
			result = self.lo.get(dn)
			if result.get(attribute) is not None:
				self.errors.append('Expected that {!r} has no permission to read attribute {!r} from {!r}: result={!r}'.format(self.actor_dn, attribute, dn, result.get(attribute)))
		elif permission == 'read':
			result = self.lo.get(dn)
			if result.get(attribute) is None:
				self.errors.append('Expected that {!r} has permission to read attribute {!r} from {!r}: result={!r}'.format(self.actor_dn, attribute, dn, result.get(attribute)))
			try:
				self.lo.modify(dn, [[attribute, result.get(attribute), ['TEST']]])
				self.lo.modify(dn, [[attribute, ['TEST'], result.get(attribute)]])
				self.errors.append('Expected that {!r} has only permission to read attribute {!r} from {!r} but is also able to write'.format(self.actor_dn, attribute, dn))
			except univention.admin.uexceptions.permissionDenied:
				pass
		elif permission == 'write':
			result = self.lo.get(dn)
			if result.get(attribute) is None:
				self.errors.append('Expected that {!r} has permission to write {!r} to {!r}: result={!r}'.format(self.actor_dn, attribute, dn, result.get(attribute)))
			try:
				self.lo.modify(dn, [[attribute, result.get(attribute), ['TEST']]])
				self.lo.modify(dn, [[attribute, ['TEST'], result.get(attribute)]])
			except univention.admin.uexceptions.permissionDenied:
				self.errors.append('Expected that {!r} has permission to write {!r} to {!r} but can only read: result={!r}'.format(self.actor_dn, attribute, dn, result.get(attribute)))

	def raise_on_error(self):
		"""
		Raises an exception with detailed information, if there was at least one error during previous checks.
		"""
		if not self.errors:
			return
		all_msgs = []
		for i, msg in enumerate(self.errors):
			all_msgs.append('ERROR {}) {}'.format(i, msg))
		raise Exception('There were {} ACL errors with {!r}:\n{}'.format(
			len(self.errors),
			self.actor_dn,
			'\n'.join(all_msgs),
		))


class LDAPACLCheck(AutoMultiSchoolEnv):
	def run_all_tests(self):  # type: () -> None
		self.test_schooladmin_pw_reset()

	def test_schooladmin_pw_reset(self):  # type: () -> None
		'''
		Bug #35447:
		Check if schooladmins are able to reset passwords of
		- students
		- teachers
		- teachers and staff
		- staff
		But not
		- other schooladmins of same/other OU
		- domain admins
		- global users
		'''

		acl_tester = ACLTester(self.ucr, self.schoolA.admin1.dn)
		for permission, dn in [
				# generic
				('none', self.generic.domain_admin.dn),
				('none', self.generic.domain_user.dn),
				# school A
				('write', self.schoolA.student.dn),
				('write', self.schoolA.teacher.dn),
				('write', self.schoolA.teacher_staff.dn),
				('write', self.schoolA.staff.dn),
				('read', self.schoolA.admin1.dn),
				('read', self.schoolA.admin2.dn),
				# school B
				('write', self.schoolB.student.dn),
				('write', self.schoolB.teacher.dn),
				('write', self.schoolB.teacher_staff.dn),
				('write', self.schoolB.staff.dn),
				('read', self.schoolB.admin1.dn),
				('read', self.schoolB.admin2.dn),
				# school C
				('none', self.schoolC.student.dn),
				('none', self.schoolC.teacher.dn),
				('none', self.schoolC.teacher_staff.dn),
				('none', self.schoolC.staff.dn),
				('none', self.schoolC.admin1.dn),
				('none', self.schoolC.admin2.dn),
		]:
			acl_tester.test_attribute(dn, 'userPassword', permission)
		acl_tester.raise_on_error()

		acl_tester = ACLTester(self.ucr, self.schoolB.admin1.dn)
		for permission, dn in [
				# generic
				('none', self.generic.domain_admin.dn),
				('none', self.generic.domain_user.dn),
				# school A
				('write', self.schoolA.student.dn),
				('write', self.schoolA.teacher.dn),
				('write', self.schoolA.teacher_staff.dn),
				('write', self.schoolA.staff.dn),
				('read', self.schoolA.admin1.dn),
				('read', self.schoolA.admin2.dn),
				# school B
				('write', self.schoolB.student.dn),
				('write', self.schoolB.teacher.dn),
				('write', self.schoolB.teacher_staff.dn),
				('write', self.schoolB.staff.dn),
				('read', self.schoolB.admin1.dn),
				('read', self.schoolB.admin2.dn),
				# school C
				('none', self.schoolC.student.dn),
				('none', self.schoolC.teacher.dn),
				('none', self.schoolC.teacher_staff.dn),
				('none', self.schoolC.staff.dn),
				('none', self.schoolC.admin1.dn),
				('none', self.schoolC.admin2.dn),
		]:
			acl_tester.test_attribute(dn, 'userPassword', permission)
		acl_tester.raise_on_error()

		acl_tester = ACLTester(self.ucr, self.schoolC.admin1.dn)
		for permission, dn in [
				# generic
				('none', self.generic.domain_admin.dn),
				('none', self.generic.domain_user.dn),
				# school A
				('none', self.schoolA.student.dn),
				('none', self.schoolA.teacher.dn),
				('none', self.schoolA.teacher_staff.dn),
				('none', self.schoolA.staff.dn),
				('none', self.schoolA.admin1.dn),
				('none', self.schoolA.admin2.dn),
				# school B
				('none', self.schoolB.student.dn),
				('none', self.schoolB.teacher.dn),
				('none', self.schoolB.teacher_staff.dn),
				('none', self.schoolB.staff.dn),
				('none', self.schoolB.admin1.dn),
				('none', self.schoolB.admin2.dn),
				# school C
				('write', self.schoolC.student.dn),
				('write', self.schoolC.teacher.dn),
				('write', self.schoolC.teacher_staff.dn),
				('write', self.schoolC.staff.dn),
				('read', self.schoolC.admin1.dn),
				('read', self.schoolC.admin2.dn),
		]:
			acl_tester.test_attribute(dn, 'userPassword', permission)
		acl_tester.raise_on_error()


def main():
	with LDAPACLCheck() as test_suite:
		test_suite.create_multi_env_global_objects()
		test_suite.create_multi_env_school_objects()

		# for debugging purposes
		if os.path.exists('/tmp/75_ldap_acls_specific_tests.debug'):
			fn = '/tmp/75_ldap_acls_specific_tests.continue'
			logger.info('=== DEBUGGING MODE ===')
			logger.info('Waiting for cleanup until %r exists...', fn)
			while not os.path.exists(fn):
				time.sleep(1)

		test_suite.run_all_tests()


if __name__ == '__main__':
	main()
