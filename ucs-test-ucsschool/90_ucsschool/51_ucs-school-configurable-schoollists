#!/usr/share/ucs-test/runner python
## desc: Test umc calls to generate school class lists with altered attributes.
## roles: [domaincontroller_master, domaincontroller_slave]
## tags: [apptest,ucsschool_base1]
## exposure: dangerous
## packages: [ucs-school-umc-groups]

import random
from univention.admin.uexceptions import valueInvalidSyntax
from univention.testing.umc import Client
import univention.testing.ucsschool.ucs_test_school as utu
import univention.testing.utils as utils
import univention.testing.strings as uts
from univention.lib.umc import HTTPError
from ucsschool.lib.models import Student
import univention.config_registry


def random_properties(udm_user, klass_name, n=5):
	"""
		Choose n random properties, which are already set.
		Always add pseudo-attribute 'Class'

	"""
	udm_properties = []
	expected_values = []
	while len(udm_properties) < n:
		key = random.choice(udm_user.keys())
		value = udm_user.get(key)
		if value:
			udm_properties.append(key)
			if type(value) is list:
				value = ' '.join(udm_user.get(key))
			expected_values.append(value)
	udm_properties.append('Class')
	expected_values.append(klass_name)
	column_names = [value.upper() for value in udm_properties]
	return expected_values, udm_properties, column_names


def main():

	with utu.UCSTestSchool() as schoolenv:
		host = schoolenv.ucr.get('hostname')
		ucrv_name = 'ucsschool/umc/lists/class/attributes'
		school_name, oudn = schoolenv.create_ou()
		class_name, class_dn = schoolenv.create_school_class(school_name)
		student_firstname = uts.random_string()
		student_lastname = uts.random_string()
		student_mailaddress = "{}@{}".format(student_firstname,host)
		student, student_dn = schoolenv.create_user(
			school_name,
			classes=class_name,
			firstname=student_firstname,
			lastname=student_lastname,
			mailaddress=student_mailaddress,
		)
		klass_name = class_name.split('-', 1)[1]
		udm_user = Student.from_dn(student_dn, school_name, schoolenv.lo).get_udm_object(schoolenv.lo)
		cases = [random_properties(udm_user, klass_name) for _ in range(5)]
		# Mess up one udm-property to get an error.
		_udm_properties = cases[-1][1]
		_udm_properties[0] = "{}-false".format(_udm_properties[0])
		expected_error = _udm_properties[0]

		for expected_values, udm_properties, column_names in cases:

			ucr_value = ",".join([" ".join(pair) for pair in zip(udm_properties, column_names)])
			print('## Set {}={}'.format(ucrv_name, ucr_value))
			univention.config_registry.handler_set(['{}={}'.format(ucrv_name, ucr_value)])
			schoolenv.ucr.load()

			account = utils.UCSTestDomainAdminCredentials()
			connection = Client(host, language='en_US')
			connection.authenticate(account.username, account.bindpw)
			expected_class_list = {
				u'csv': u'{fieldnames_string}\r\n{expected_values}\r\n'.format(
					fieldnames_string=",".join(column_names),
					expected_values=",".join(expected_values)
				),
				u'filename': u'{}.csv'.format(class_name),
			}
			options = {'school': school_name, 'group': class_dn, 'separator': ','}
			try:
				class_list = connection.umc_command('schoollists/csvlist', options).result
			except HTTPError as exc:
				assert expected_error in exc.message
				print('The failed UMC request failed was expected.')
				continue
			print('Expected: {}'.format(expected_class_list))
			print('Received: {}'.format(class_list))
			# Multi-values are returned in "", replacing them was the easiest way.
			class_list['csv'] = class_list['csv'].replace('"', '')
			assert class_list == expected_class_list
			univention.config_registry.handler_unset([ucrv_name])


if __name__ == '__main__':
	main()
