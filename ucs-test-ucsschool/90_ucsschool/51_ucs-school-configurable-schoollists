#!/usr/share/ucs-test/runner python
## desc: Test umc calls to generate school class lists with altered attributes.
## roles: [domaincontroller_master, domaincontroller_slave]
## tags: [apptest,ucsschool_base1]
## exposure: dangerous
## packages: [ucs-school-umc-groups]

from univention.testing.umc import Client
import univention.testing.ucr as ucr_test
import univention.testing.ucsschool.ucs_test_school as utu
import univention.testing.utils as utils
import univention.testing.strings as uts
from univention.lib.umc import HTTPError


def main():
	ucr = ucr_test.UCSTestConfigRegistry()
	ucr.load()
	host = ucr.get('hostname')
	with utu.UCSTestSchool() as schoolenv:
		print(host)
		school_name, oudn = schoolenv.create_ou()
		class_name, class_dn = schoolenv.create_school_class(school_name)
		stu_firstname = uts.random_string()
		stu_lastname = uts.random_string()
		student, studn = schoolenv.create_user(
			school_name,
			classes=class_name,
			firstname=stu_firstname,
			lastname=stu_lastname
		)
		# todo set ucr
		ucr = schoolenv.ucr
		# todo pick random udm-property
		#
		default_value = 'firstname Firstname,lastname Lastname,Class Class,displayName Username'
		ucr_value = default_value

		attributes, fieldnames = zip(*[field.split() for field in ucr_value.split(",")])
		fieldnames_string = ",".join(fieldnames)
		account = utils.UCSTestDomainAdminCredentials()

		connection = Client(host, language='en_US')
		connection.authenticate(account.username, account.bindpw)
		separator = ','
		options = {'school': school_name, 'group': class_dn, 'separator': separator}
		try:
			class_list = connection.umc_command('schoollists/csvlist', options).result
		except HTTPError as exc:
			# todo refacture to function & expected msg
			assert exc.message == "'displayNames' is not a valid UDM-property. Please change the value of UCR ucsschool/umc/lists/class/attributes."

		# done uid -> username
		# todo more random...
		expected_values = ",".join([stu_firstname, stu_lastname, class_name.split('-', 1)[1], "{} {}".format(stu_firstname, stu_lastname)])
		line = u'{fieldnames_string}\r\n{expected_values}\r\n'.format(
			fieldnames_string=fieldnames_string,
			expected_values=expected_values
		)

		expected_class_list = {
			u'csv': line,
			u'filename': u'{}.csv'.format(class_name),
		}
		print('Expected: {}'.format(expected_class_list))
		print('Received: {}'.format(class_list))
		assert class_list == expected_class_list


if __name__ == '__main__':
	main()
