#!/usr/bin/python3
# -*- coding: utf-8 -*-
#
# Univention Management Console module:
#   Control computers of pupils in a room
#
# Copyright 2012-2021 Univention GmbH
#
# http://www.univention.de/
#
# All rights reserved.
#
# The source code of this program is made available
# under the terms of the GNU Affero General Public License version 3
# (GNU AGPL V3) as published by the Free Software Foundation.
#
# Binary versions of this program provided by Univention to you as
# well as other copyrighted, protected or trademarked materials like
# Logos, graphics, fonts, specific documentations and configurations,
# cryptographic keys etc. are subject to a license agreement between
# you and Univention and not subject to the GNU AGPL V3.
#
# In the case you use this program under the terms of the GNU AGPL V3,
# the program is provided in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public
# License with the Debian GNU/Linux or Univention distribution in file
# /usr/share/common-licenses/AGPL-3; if not, see
# <http://www.gnu.org/licenses/>.

import subprocess
from argparse import ArgumentParser

import univention.admin.uexceptions as udm_exceptions
from ucsschool.lib.models.group import ComputerRoom
from univention.admin.uldap import getMachineConnection
from univention.config_registry import ConfigRegistry, handler_set, handler_unset
from univention.management.console.modules.computerroom import reset_room_settings


def deactivate_rules(roomDN):
    lo, po = getMachineConnection()
    try:
        room = ComputerRoom.from_dn(roomDN, None, lo)
    except udm_exceptions.noObject:
        return
    hosts = []
    for pc in room.get_computers(lo):
        hosts += pc.ip_address
    reset_room_settings(room.get_relative_name(), hosts)
    # reload cups
    subprocess.call(["systemctl", "reload", "cups.service"])


def deprecated_deactivate_rules(options):
    ucr = ConfigRegistry()
    ucr.load()

    hosts = set(options.hosts)
    vset = {}

    # extract values
    for variable in options.extract:
        if ucr.get(variable):
            old = set(ucr[variable].split(" "))
        else:
            old = set()
        new = old.difference(hosts)
        if new:
            vset[variable] = " ".join(new)
        else:
            options.remove.append(variable)

    handler_set(["%s=%s" % x for x in vset.items()])

    # remove values
    handler_unset(options.remove)

    # reload cups
    if not subprocess.call(["systemctl", "is-active", "--quiet", "cups.service"]):
        subprocess.call(["systemctl", "reload", "cups.service"])


if __name__ == "__main__":
    parser = ArgumentParser()

    parser.add_argument("-r", "--remove", action="append", default=[])  # Deprecated
    parser.add_argument("-e", "--extract", action="append", default=[])  # Deprecated
    parser.add_argument("-o", "--room", action="append", dest="rooms", default=[])
    parser.add_argument("hosts", nargs="*")

    options = parser.parse_args()

    for room in options.rooms:
        deactivate_rules(room)
    else:
        deprecated_deactivate_rules(options)
