#!/usr/bin/env python3

# ########################################################################### #
#                                                                             #
#  Check that the expected fields are present in all advisories and the       #
#  format of the fields is correct.                                           #
#                                                                             #
#  This script takes a list of paths to the advisories to be validated:       #
#                                                                             #
#      validate-advisories doc/errata/staging/advisory-1.yaml ...             #
#                                                                             #
# ########################################################################### #

import os
import re
import sys
from typing import List

import yaml


def get_latest_package(package_name: str) -> str:
    filename = f"{package_name}/debian/changelog"
    package_version = "Unknown"
    try:
        with open(filename) as changelog_file:
            changelog = changelog_file.readlines()
            for line in changelog:
                version = re.match(f"{package_name} \\((\\d+\\.\\d+\\.\\d+)\\)", line)
                if version:
                    package_version = version.groups()[0]
                    break
    except FileNotFoundError:
        print(f"ERROR: changlog missing for {package_name}")

    return package_version


def check_yaml_content(filename: str) -> List[str]:
    """
    :param filename: path to the advisory file
    :return: list of strings: errors found while validating yaml
    """
    errors = []

    with open(filename) as advisory_file:
        advisory = yaml.safe_load(advisory_file)
        if not advisory:
            errors.append(f"could not load {filename}, invalid yaml")
            return errors

    product = advisory.get("product")
    if product is None:
        errors.append("product is missing")
    elif product != "ucsschool":
        errors.append("product must be 'ucsschool'")

    release = advisory.get("release")
    if release is None:
        errors.append("release is missing")
    elif not isinstance(release, str):
        errors.append("release should be a string, not a number")
    elif not re.match(r"^\d+\.\d+$", release):
        errors.append("release format incorrect -- example: '5.0'")

    version = advisory.get("version")
    if version is None:
        errors.append("version is missing")
    elif version != [0]:
        errors.append("version should be [0]")

    src = advisory.get("src")
    expected_src_package = os.path.splitext(os.path.basename(filename))[0]
    if src is None:
        errors.append("src is missing")
    elif src != expected_src_package:
        errors.append("src or yaml file name is wrong")

    fix = advisory.get("fix")
    expected_fix_version = get_latest_package(expected_src_package)
    if fix is None:
        errors.append("fix is missing")
    elif fix != expected_fix_version:
        errors.append(f"fix version is {fix}, expected {expected_fix_version}")

    desc = advisory.get("desc")
    desc_bugs = []
    if desc is None:
        errors.append("desc is missing")
    else:
        changes = desc.split("\n")
        for change in changes:
            for bug in re.finditer(r"[Bb]ug\s*#(\d+)", change):
                desc_bugs.append(bug.group(1))

    raw_bugs = advisory.get("bug")
    if not raw_bugs:
        errors.append("bug is missing")
    elif not isinstance(raw_bugs, list):
        errors.append("bug should be an array")
    else:
        bugs = [str(bug) for bug in raw_bugs]
        for bug in bugs:
            if not re.match(r"^\d+$", bug):
                errors.append(
                    "format of bug listing is not correct, field is a comma-separated "
                    f"array of numbers: {bug}"
                )
        if not set(desc_bugs) == set(bugs):
            errors.append("bugs in description do not match bugs in bug field")

    return errors


def check_yaml_files(advisories: List[str]) -> None:
    """
    :param advisories: list of paths to advisory files to check
    :return: None
    """
    errors = {}
    for advisory in advisories:
        advisory_errors = check_yaml_content(advisory)
        if advisory_errors:
            errors[advisory] = advisory_errors

    if errors:
        print("Errors found in advisories!")
        for filename, errs in errors.items():
            print(f"{filename}:")
            for err in errs:
                print(f"\t- {err}")
        sys.exit(1)
    else:
        print("All advisories validated.")


if __name__ == "__main__":
    check_yaml_files(sys.argv[1:])
