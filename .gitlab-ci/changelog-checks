#!/usr/bin/env python3

# Checks which are run when a changelog is changed

import pathlib
import re
import sys
from datetime import datetime
from functools import lru_cache
from typing import List

import yaml
from debian.changelog import Changelog


def get_last_version_date(path: str):
    with open(path) as fp:
        log = Changelog(fp.read())
        return datetime.strptime(log.date, "%a, %d %b %Y %H:%M:%S %z")


def get_latest_package(package_name: str) -> str:
    filename = f"{package_name}/debian/changelog"
    package_version = "Unknown"
    try:
        with open(filename) as changelog_file:
            changelog = changelog_file.readlines()
            for line in changelog:
                if package_name == "ucs-school-veyon-windows":
                    version = re.match(
                        f"{package_name} \\((\\d+\\.\\d+\\.\\d+.\\d+-ucs\\d+\\.\\d+-\\d+)\\)", line
                    )
                else:
                    version = re.match(f"{package_name} \\((\\d+\\.\\d+\\.\\d+)\\)", line)
                if version:
                    package_version = version.groups()[0]
                    break

    except FileNotFoundError:
        print(f"ERROR: changelog missing for {package_name}")

    return package_version


@lru_cache(maxsize=1)
def get_last_release_date():
    with open("doc/ucsschool-changelog/changelog.rst") as f:
        change_log = f.readlines()
    pattern = re.compile(r"Released on (?P<release_date>\d{4}-\d{2}-\d{2})")
    last_release_date = "1980-01-01"
    for line in change_log:
        m = pattern.match(line)
        if m:
            last_release_date = m["release_date"]
    return datetime.strptime(last_release_date + " +0000", "%Y-%m-%d %z")


def check_for_advisories(changelogs: List[str]):
    """Check that an acompanying advisory exists for a changed changelog"""
    advisory_staged_path = pathlib.Path("doc/errata/staging/")
    advisory_published_path = pathlib.Path("doc/errata/published/")
    changelog_paths = (pathlib.Path(c) for c in changelogs)

    errors = []
    for path in changelog_paths:
        if get_last_version_date(path) < get_last_release_date():
            continue

        package_name = path.parts[0]
        lastest_package_version = get_latest_package(package_name)
        filename = f"{package_name}.yaml"
        yaml_found = False

        for published_advisory in advisory_published_path.glob(f"*{filename}"):
            with open(published_advisory) as f:
                data = yaml.safe_load(f)
            version = data["fix"]
            yaml_found |= version == lastest_package_version

        filepath = advisory_staged_path.joinpath(filename)
        yaml_found |= filepath.exists()

        if not yaml_found:
            errors.append(
                f"ERROR: Changelog {path} has been changed, but no YAML *{filepath.name} "
                f"exists in {advisory_published_path} or {advisory_staged_path}."
            )

    return errors


if __name__ == "__main__":
    errors = check_for_advisories(sys.argv[1:])
    if errors:
        for e in errors:
            print(e)
        sys.exit(1)
